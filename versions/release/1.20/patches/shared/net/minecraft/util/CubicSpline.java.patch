--- a/net/minecraft/util/CubicSpline.java
+++ b/net/minecraft/util/CubicSpline.java
@@ -22,10 +22,10 @@
 
    static <C, I extends ToFloatFunction<C>> Codec<CubicSpline<C, I>> m_184262_(Codec<I> p_184263_) {
       MutableObject<Codec<CubicSpline<C, I>>> mutableobject = new MutableObject<>();
-      Codec<Point<C, I>> codec = RecordCodecBuilder.create((p_184270_) -> {
-         return p_184270_.group(Codec.FLOAT.fieldOf("location").forGetter(Point::f_184273_), ExtraCodecs.m_184415_(mutableobject::getValue).fieldOf("value").forGetter(Point::f_184274_), Codec.FLOAT.fieldOf("derivative").forGetter(Point::f_184275_)).apply(p_184270_, (p_184242_, p_184243_, p_184244_) -> {
             record Point<C, I extends ToFloatFunction<C>>(float f_184273_, CubicSpline<C, I> f_184274_, float f_184275_) {
             }
+      Codec<Point<C, I>> codec = RecordCodecBuilder.create((p_184270_) -> {
+         return p_184270_.group(Codec.FLOAT.fieldOf("location").forGetter(Point::f_184273_), ExtraCodecs.m_184415_(mutableobject::getValue).fieldOf("value").forGetter(Point::f_184274_), Codec.FLOAT.fieldOf("derivative").forGetter(Point::f_184275_)).apply(p_184270_, (p_184242_, p_184243_, p_184244_) -> {
 
             return new Point<>((float)p_184242_, p_184243_, (float)p_184244_);
          });
